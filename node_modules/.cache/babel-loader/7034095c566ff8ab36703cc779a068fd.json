{"remainingRequest":"/home/odd/Frontend Mentor Challenges/todo-app-main/node_modules/babel-loader/lib/index.js!/home/odd/Frontend Mentor Challenges/todo-app-main/node_modules/eslint-loader/index.js??ref--13-0!/home/odd/Frontend Mentor Challenges/todo-app-main/src/store/modules/theme.js","dependencies":[{"path":"/home/odd/Frontend Mentor Challenges/todo-app-main/src/store/modules/theme.js","mtime":1623594837336},{"path":"/home/odd/Frontend Mentor Challenges/todo-app-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/odd/Frontend Mentor Challenges/todo-app-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/odd/Frontend Mentor Challenges/todo-app-main/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHN0YXRlID0gewogIGRhcmtNb2RlOiBmYWxzZQp9Owp2YXIgZ2V0dGVycyA9IHsKICBkYXJrTW9kZTogZnVuY3Rpb24gZGFya01vZGUoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5kYXJrTW9kZTsKICB9Cn07CnZhciBhY3Rpb25zID0ge307CnZhciBtdXRhdGlvbnMgPSB7CiAgVVBEQVRFX0RBUktfTU9ERTogZnVuY3Rpb24gVVBEQVRFX0RBUktfTU9ERShzdGF0ZSwgZGFya01vZGUpIHsKICAgIHJldHVybiBzdGF0ZS5kYXJrTW9kZSA9IGRhcmtNb2RlOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiBzdGF0ZSwKICBnZXR0ZXJzOiBnZXR0ZXJzLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["/home/odd/Frontend Mentor Challenges/todo-app-main/src/store/modules/theme.js"],"names":["state","darkMode","getters","actions","mutations","UPDATE_DARK_MODE"],"mappings":"AAAA,IAAMA,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE;AADE,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdD,EAAAA,QAAQ,EAAE,kBAAAD,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAV;AAAA;AADD,CAAhB;AAIA,IAAME,OAAO,GAAG,EAAhB;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,gBAAgB,EAAE,0BAACL,KAAD,EAAQC,QAAR;AAAA,WAAqBD,KAAK,CAACC,QAAN,GAAiBA,QAAtC;AAAA;AADF,CAAlB;AAGA,eAAe;AACbD,EAAAA,KAAK,EAALA,KADa;AAEbE,EAAAA,OAAO,EAAPA,OAFa;AAGbE,EAAAA,SAAS,EAATA,SAHa;AAIbD,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["const state = {\n  darkMode: false\n\n}\nconst getters = {\n  darkMode: state => state.darkMode,\n}\n\nconst actions = {\n};\nconst mutations = {\n  UPDATE_DARK_MODE: (state, darkMode) => state.darkMode = darkMode\n}\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}